// Code generated by Kitex v0.13.1. DO NOT EDIT.

package zkserver_operations

import (
	api "Wx_MQ/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BroInfo": kitex.NewMethodInfo(
		broInfoHandler,
		newZKServer_OperationsBroInfoArgs,
		newZKServer_OperationsBroInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ProGetBro": kitex.NewMethodInfo(
		proGetBroHandler,
		newZKServer_OperationsProGetBroArgs,
		newZKServer_OperationsProGetBroResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ConGetBro": kitex.NewMethodInfo(
		conGetBroHandler,
		newZKServer_OperationsConGetBroArgs,
		newZKServer_OperationsConGetBroResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	zKServer_OperationsServiceInfo                = NewServiceInfo()
	zKServer_OperationsServiceInfoForClient       = NewServiceInfoForClient()
	zKServer_OperationsServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return zKServer_OperationsServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return zKServer_OperationsServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return zKServer_OperationsServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ZKServer_Operations"
	handlerType := (*api.ZKServer_Operations)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func broInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZKServer_OperationsBroInfoArgs)
	realResult := result.(*api.ZKServer_OperationsBroInfoResult)
	success, err := handler.(api.ZKServer_Operations).BroInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZKServer_OperationsBroInfoArgs() interface{} {
	return api.NewZKServer_OperationsBroInfoArgs()
}

func newZKServer_OperationsBroInfoResult() interface{} {
	return api.NewZKServer_OperationsBroInfoResult()
}

func proGetBroHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZKServer_OperationsProGetBroArgs)
	realResult := result.(*api.ZKServer_OperationsProGetBroResult)
	success, err := handler.(api.ZKServer_Operations).ProGetBro(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZKServer_OperationsProGetBroArgs() interface{} {
	return api.NewZKServer_OperationsProGetBroArgs()
}

func newZKServer_OperationsProGetBroResult() interface{} {
	return api.NewZKServer_OperationsProGetBroResult()
}

func conGetBroHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZKServer_OperationsConGetBroArgs)
	realResult := result.(*api.ZKServer_OperationsConGetBroResult)
	success, err := handler.(api.ZKServer_Operations).ConGetBro(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZKServer_OperationsConGetBroArgs() interface{} {
	return api.NewZKServer_OperationsConGetBroArgs()
}

func newZKServer_OperationsConGetBroResult() interface{} {
	return api.NewZKServer_OperationsConGetBroResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BroInfo(ctx context.Context, req *api.BroInfoRequest) (r *api.BroInfoResponse, err error) {
	var _args api.ZKServer_OperationsBroInfoArgs
	_args.Req = req
	var _result api.ZKServer_OperationsBroInfoResult
	if err = p.c.Call(ctx, "BroInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProGetBro(ctx context.Context, req *api.ProGetBroRequest) (r *api.ProGetBroResponse, err error) {
	var _args api.ZKServer_OperationsProGetBroArgs
	_args.Req = req
	var _result api.ZKServer_OperationsProGetBroResult
	if err = p.c.Call(ctx, "ProGetBro", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConGetBro(ctx context.Context, req *api.ConGetBroRequest) (r *api.ConGetBroResponse, err error) {
	var _args api.ZKServer_OperationsConGetBroArgs
	_args.Req = req
	var _result api.ZKServer_OperationsConGetBroResult
	if err = p.c.Call(ctx, "ConGetBro", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
