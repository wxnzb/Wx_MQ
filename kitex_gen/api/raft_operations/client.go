// Code generated by Kitex v0.13.1. DO NOT EDIT.

package raft_operations

import (
	api "Wx_MQ/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	RequestVote(ctx context.Context, args_ *api.RequestVoteArgs_, callOptions ...callopt.Option) (r *api.ResponseVoteReply, err error)
	AppendEntries(ctx context.Context, args_ *api.AppendEntriesArgs_, callOptions ...callopt.Option) (r *api.AppendEntriesReply, err error)
	SnapShot(ctx context.Context, args_ *api.SnapShotArgs_, callOptions ...callopt.Option) (r *api.SnapShotReply, err error)
	Pingpong(ctx context.Context, req *api.PingPongArgs_, callOptions ...callopt.Option) (r *api.PingPongReply, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kRaft_OperationsClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRaft_OperationsClient struct {
	*kClient
}

func (p *kRaft_OperationsClient) RequestVote(ctx context.Context, args_ *api.RequestVoteArgs_, callOptions ...callopt.Option) (r *api.ResponseVoteReply, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RequestVote(ctx, args_)
}

func (p *kRaft_OperationsClient) AppendEntries(ctx context.Context, args_ *api.AppendEntriesArgs_, callOptions ...callopt.Option) (r *api.AppendEntriesReply, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppendEntries(ctx, args_)
}

func (p *kRaft_OperationsClient) SnapShot(ctx context.Context, args_ *api.SnapShotArgs_, callOptions ...callopt.Option) (r *api.SnapShotReply, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SnapShot(ctx, args_)
}

func (p *kRaft_OperationsClient) Pingpong(ctx context.Context, req *api.PingPongArgs_, callOptions ...callopt.Option) (r *api.PingPongReply, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Pingpong(ctx, req)
}
