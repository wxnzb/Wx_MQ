// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
)

type RequestVoteArgs_ struct {
	Term          int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	CandidateId   int8   `thrift:"CandidateId,2" frugal:"2,default,i8" json:"CandidateId"`
	LastLogIndex  int8   `thrift:"LastLogIndex,3" frugal:"3,default,i8" json:"LastLogIndex"`
	LastLogTerm   int8   `thrift:"LastLogTerm,4" frugal:"4,default,i8" json:"LastLogTerm"`
	TopicName     string `thrift:"TopicName,5" frugal:"5,default,string" json:"TopicName"`
	PartitionName string `thrift:"PartitionName,6" frugal:"6,default,string" json:"PartitionName"`
}

func NewRequestVoteArgs_() *RequestVoteArgs_ {
	return &RequestVoteArgs_{}
}

func (p *RequestVoteArgs_) InitDefault() {
}

func (p *RequestVoteArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *RequestVoteArgs_) GetCandidateId() (v int8) {
	return p.CandidateId
}

func (p *RequestVoteArgs_) GetLastLogIndex() (v int8) {
	return p.LastLogIndex
}

func (p *RequestVoteArgs_) GetLastLogTerm() (v int8) {
	return p.LastLogTerm
}

func (p *RequestVoteArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *RequestVoteArgs_) GetPartitionName() (v string) {
	return p.PartitionName
}
func (p *RequestVoteArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *RequestVoteArgs_) SetCandidateId(val int8) {
	p.CandidateId = val
}
func (p *RequestVoteArgs_) SetLastLogIndex(val int8) {
	p.LastLogIndex = val
}
func (p *RequestVoteArgs_) SetLastLogTerm(val int8) {
	p.LastLogTerm = val
}
func (p *RequestVoteArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *RequestVoteArgs_) SetPartitionName(val string) {
	p.PartitionName = val
}

func (p *RequestVoteArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteArgs_(%+v)", *p)
}

var fieldIDToName_RequestVoteArgs_ = map[int16]string{
	1: "Term",
	2: "CandidateId",
	3: "LastLogIndex",
	4: "LastLogTerm",
	5: "TopicName",
	6: "PartitionName",
}

type ResponseVoteReply struct {
	VoteGranted bool `thrift:"VoteGranted,1" frugal:"1,default,bool" json:"VoteGranted"`
	Term        int8 `thrift:"Term,2" frugal:"2,default,i8" json:"Term"`
}

func NewResponseVoteReply() *ResponseVoteReply {
	return &ResponseVoteReply{}
}

func (p *ResponseVoteReply) InitDefault() {
}

func (p *ResponseVoteReply) GetVoteGranted() (v bool) {
	return p.VoteGranted
}

func (p *ResponseVoteReply) GetTerm() (v int8) {
	return p.Term
}
func (p *ResponseVoteReply) SetVoteGranted(val bool) {
	p.VoteGranted = val
}
func (p *ResponseVoteReply) SetTerm(val int8) {
	p.Term = val
}

func (p *ResponseVoteReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseVoteReply(%+v)", *p)
}

var fieldIDToName_ResponseVoteReply = map[int16]string{
	1: "VoteGranted",
	2: "Term",
}

type AppendEntriesArgs_ struct {
	Term          int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	LeaderId      int8   `thrift:"LeaderId,2" frugal:"2,default,i8" json:"LeaderId"`
	PrevLogIndex  int8   `thrift:"PrevLogIndex,3" frugal:"3,default,i8" json:"PrevLogIndex"`
	PrevLogTerm   int8   `thrift:"PrevLogTerm,4" frugal:"4,default,i8" json:"PrevLogTerm"`
	LeaderCommit  int8   `thrift:"LeaderCommit,5" frugal:"5,default,i8" json:"LeaderCommit"`
	Entries       []byte `thrift:"Entries,6" frugal:"6,default,binary" json:"Entries"`
	TopicName     string `thrift:"TopicName,7" frugal:"7,default,string" json:"TopicName"`
	PartitionName string `thrift:"PartitionName,8" frugal:"8,default,string" json:"PartitionName"`
}

func NewAppendEntriesArgs_() *AppendEntriesArgs_ {
	return &AppendEntriesArgs_{}
}

func (p *AppendEntriesArgs_) InitDefault() {
}

func (p *AppendEntriesArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *AppendEntriesArgs_) GetPrevLogIndex() (v int8) {
	return p.PrevLogIndex
}

func (p *AppendEntriesArgs_) GetPrevLogTerm() (v int8) {
	return p.PrevLogTerm
}

func (p *AppendEntriesArgs_) GetLeaderCommit() (v int8) {
	return p.LeaderCommit
}

func (p *AppendEntriesArgs_) GetEntries() (v []byte) {
	return p.Entries
}

func (p *AppendEntriesArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *AppendEntriesArgs_) GetPartitionName() (v string) {
	return p.PartitionName
}
func (p *AppendEntriesArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *AppendEntriesArgs_) SetPrevLogIndex(val int8) {
	p.PrevLogIndex = val
}
func (p *AppendEntriesArgs_) SetPrevLogTerm(val int8) {
	p.PrevLogTerm = val
}
func (p *AppendEntriesArgs_) SetLeaderCommit(val int8) {
	p.LeaderCommit = val
}
func (p *AppendEntriesArgs_) SetEntries(val []byte) {
	p.Entries = val
}
func (p *AppendEntriesArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *AppendEntriesArgs_) SetPartitionName(val string) {
	p.PartitionName = val
}

func (p *AppendEntriesArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesArgs_(%+v)", *p)
}

var fieldIDToName_AppendEntriesArgs_ = map[int16]string{
	1: "Term",
	2: "LeaderId",
	3: "PrevLogIndex",
	4: "PrevLogTerm",
	5: "LeaderCommit",
	6: "Entries",
	7: "TopicName",
	8: "PartitionName",
}

type AppendEntriesReply struct {
	Success        bool `thrift:"Success,1" frugal:"1,default,bool" json:"Success"`
	Term           int8 `thrift:"Term,2" frugal:"2,default,i8" json:"Term"`
	LogTerm        int8 `thrift:"LogTerm,3" frugal:"3,default,i8" json:"LogTerm"`
	TermFirstIndex int8 `thrift:"TermFirstIndex,4" frugal:"4,default,i8" json:"TermFirstIndex"`
}

func NewAppendEntriesReply() *AppendEntriesReply {
	return &AppendEntriesReply{}
}

func (p *AppendEntriesReply) InitDefault() {
}

func (p *AppendEntriesReply) GetSuccess() (v bool) {
	return p.Success
}

func (p *AppendEntriesReply) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesReply) GetLogTerm() (v int8) {
	return p.LogTerm
}

func (p *AppendEntriesReply) GetTermFirstIndex() (v int8) {
	return p.TermFirstIndex
}
func (p *AppendEntriesReply) SetSuccess(val bool) {
	p.Success = val
}
func (p *AppendEntriesReply) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesReply) SetLogTerm(val int8) {
	p.LogTerm = val
}
func (p *AppendEntriesReply) SetTermFirstIndex(val int8) {
	p.TermFirstIndex = val
}

func (p *AppendEntriesReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesReply(%+v)", *p)
}

var fieldIDToName_AppendEntriesReply = map[int16]string{
	1: "Success",
	2: "Term",
	3: "LogTerm",
	4: "TermFirstIndex",
}

type SnapShotArgs_ struct {
	Term                 int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	LeaderId             int8   `thrift:"LeaderId,2" frugal:"2,default,i8" json:"LeaderId"`
	LastIncludedLogIndex int8   `thrift:"LastIncludedLogIndex,3" frugal:"3,default,i8" json:"LastIncludedLogIndex"`
	LastIncludedLogTerm  int8   `thrift:"LastIncludedLogTerm,4" frugal:"4,default,i8" json:"LastIncludedLogTerm"`
	Log                  []byte `thrift:"Log,5" frugal:"5,default,binary" json:"Log"`
	SnapShot             []byte `thrift:"SnapShot,6" frugal:"6,default,binary" json:"SnapShot"`
	TopicName            string `thrift:"TopicName,7" frugal:"7,default,string" json:"TopicName"`
	PartitionName        string `thrift:"PartitionName,8" frugal:"8,default,string" json:"PartitionName"`
}

func NewSnapShotArgs_() *SnapShotArgs_ {
	return &SnapShotArgs_{}
}

func (p *SnapShotArgs_) InitDefault() {
}

func (p *SnapShotArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *SnapShotArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *SnapShotArgs_) GetLastIncludedLogIndex() (v int8) {
	return p.LastIncludedLogIndex
}

func (p *SnapShotArgs_) GetLastIncludedLogTerm() (v int8) {
	return p.LastIncludedLogTerm
}

func (p *SnapShotArgs_) GetLog() (v []byte) {
	return p.Log
}

func (p *SnapShotArgs_) GetSnapShot() (v []byte) {
	return p.SnapShot
}

func (p *SnapShotArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *SnapShotArgs_) GetPartitionName() (v string) {
	return p.PartitionName
}
func (p *SnapShotArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *SnapShotArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *SnapShotArgs_) SetLastIncludedLogIndex(val int8) {
	p.LastIncludedLogIndex = val
}
func (p *SnapShotArgs_) SetLastIncludedLogTerm(val int8) {
	p.LastIncludedLogTerm = val
}
func (p *SnapShotArgs_) SetLog(val []byte) {
	p.Log = val
}
func (p *SnapShotArgs_) SetSnapShot(val []byte) {
	p.SnapShot = val
}
func (p *SnapShotArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *SnapShotArgs_) SetPartitionName(val string) {
	p.PartitionName = val
}

func (p *SnapShotArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnapShotArgs_(%+v)", *p)
}

var fieldIDToName_SnapShotArgs_ = map[int16]string{
	1: "Term",
	2: "LeaderId",
	3: "LastIncludedLogIndex",
	4: "LastIncludedLogTerm",
	5: "Log",
	6: "SnapShot",
	7: "TopicName",
	8: "PartitionName",
}

type SnapShotReply struct {
	Term int8 `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
}

func NewSnapShotReply() *SnapShotReply {
	return &SnapShotReply{}
}

func (p *SnapShotReply) InitDefault() {
}

func (p *SnapShotReply) GetTerm() (v int8) {
	return p.Term
}
func (p *SnapShotReply) SetTerm(val int8) {
	p.Term = val
}

func (p *SnapShotReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnapShotReply(%+v)", *p)
}

var fieldIDToName_SnapShotReply = map[int16]string{
	1: "Term",
}

type Raft_Operations interface {
	RequestVote(ctx context.Context, args_ *RequestVoteArgs_) (r *ResponseVoteReply, err error)

	AppendEntries(ctx context.Context, args_ *AppendEntriesArgs_) (r *AppendEntriesReply, err error)

	SnapShot(ctx context.Context, args_ *SnapShotArgs_) (r *SnapShotReply, err error)
}

type Raft_OperationsRequestVoteArgs struct {
	Args_ *RequestVoteArgs_ `thrift:"args,1" frugal:"1,default,RequestVoteArgs_" json:"args"`
}

func NewRaft_OperationsRequestVoteArgs() *Raft_OperationsRequestVoteArgs {
	return &Raft_OperationsRequestVoteArgs{}
}

func (p *Raft_OperationsRequestVoteArgs) InitDefault() {
}

var Raft_OperationsRequestVoteArgs_Args__DEFAULT *RequestVoteArgs_

func (p *Raft_OperationsRequestVoteArgs) GetArgs_() (v *RequestVoteArgs_) {
	if !p.IsSetArgs_() {
		return Raft_OperationsRequestVoteArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *Raft_OperationsRequestVoteArgs) SetArgs_(val *RequestVoteArgs_) {
	p.Args_ = val
}

func (p *Raft_OperationsRequestVoteArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *Raft_OperationsRequestVoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteArgs(%+v)", *p)
}

var fieldIDToName_Raft_OperationsRequestVoteArgs = map[int16]string{
	1: "args",
}

type Raft_OperationsRequestVoteResult struct {
	Success *ResponseVoteReply `thrift:"success,0,optional" frugal:"0,optional,ResponseVoteReply" json:"success,omitempty"`
}

func NewRaft_OperationsRequestVoteResult() *Raft_OperationsRequestVoteResult {
	return &Raft_OperationsRequestVoteResult{}
}

func (p *Raft_OperationsRequestVoteResult) InitDefault() {
}

var Raft_OperationsRequestVoteResult_Success_DEFAULT *ResponseVoteReply

func (p *Raft_OperationsRequestVoteResult) GetSuccess() (v *ResponseVoteReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsRequestVoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsRequestVoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*ResponseVoteReply)
}

func (p *Raft_OperationsRequestVoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsRequestVoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteResult(%+v)", *p)
}

var fieldIDToName_Raft_OperationsRequestVoteResult = map[int16]string{
	0: "success",
}

type Raft_OperationsAppendEntriesArgs struct {
	Args_ *AppendEntriesArgs_ `thrift:"args,1" frugal:"1,default,AppendEntriesArgs_" json:"args"`
}

func NewRaft_OperationsAppendEntriesArgs() *Raft_OperationsAppendEntriesArgs {
	return &Raft_OperationsAppendEntriesArgs{}
}

func (p *Raft_OperationsAppendEntriesArgs) InitDefault() {
}

var Raft_OperationsAppendEntriesArgs_Args__DEFAULT *AppendEntriesArgs_

func (p *Raft_OperationsAppendEntriesArgs) GetArgs_() (v *AppendEntriesArgs_) {
	if !p.IsSetArgs_() {
		return Raft_OperationsAppendEntriesArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *Raft_OperationsAppendEntriesArgs) SetArgs_(val *AppendEntriesArgs_) {
	p.Args_ = val
}

func (p *Raft_OperationsAppendEntriesArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *Raft_OperationsAppendEntriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesArgs(%+v)", *p)
}

var fieldIDToName_Raft_OperationsAppendEntriesArgs = map[int16]string{
	1: "args",
}

type Raft_OperationsAppendEntriesResult struct {
	Success *AppendEntriesReply `thrift:"success,0,optional" frugal:"0,optional,AppendEntriesReply" json:"success,omitempty"`
}

func NewRaft_OperationsAppendEntriesResult() *Raft_OperationsAppendEntriesResult {
	return &Raft_OperationsAppendEntriesResult{}
}

func (p *Raft_OperationsAppendEntriesResult) InitDefault() {
}

var Raft_OperationsAppendEntriesResult_Success_DEFAULT *AppendEntriesReply

func (p *Raft_OperationsAppendEntriesResult) GetSuccess() (v *AppendEntriesReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsAppendEntriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsAppendEntriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendEntriesReply)
}

func (p *Raft_OperationsAppendEntriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsAppendEntriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesResult(%+v)", *p)
}

var fieldIDToName_Raft_OperationsAppendEntriesResult = map[int16]string{
	0: "success",
}

type Raft_OperationsSnapShotArgs struct {
	Args_ *SnapShotArgs_ `thrift:"args,1" frugal:"1,default,SnapShotArgs_" json:"args"`
}

func NewRaft_OperationsSnapShotArgs() *Raft_OperationsSnapShotArgs {
	return &Raft_OperationsSnapShotArgs{}
}

func (p *Raft_OperationsSnapShotArgs) InitDefault() {
}

var Raft_OperationsSnapShotArgs_Args__DEFAULT *SnapShotArgs_

func (p *Raft_OperationsSnapShotArgs) GetArgs_() (v *SnapShotArgs_) {
	if !p.IsSetArgs_() {
		return Raft_OperationsSnapShotArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *Raft_OperationsSnapShotArgs) SetArgs_(val *SnapShotArgs_) {
	p.Args_ = val
}

func (p *Raft_OperationsSnapShotArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *Raft_OperationsSnapShotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsSnapShotArgs(%+v)", *p)
}

var fieldIDToName_Raft_OperationsSnapShotArgs = map[int16]string{
	1: "args",
}

type Raft_OperationsSnapShotResult struct {
	Success *SnapShotReply `thrift:"success,0,optional" frugal:"0,optional,SnapShotReply" json:"success,omitempty"`
}

func NewRaft_OperationsSnapShotResult() *Raft_OperationsSnapShotResult {
	return &Raft_OperationsSnapShotResult{}
}

func (p *Raft_OperationsSnapShotResult) InitDefault() {
}

var Raft_OperationsSnapShotResult_Success_DEFAULT *SnapShotReply

func (p *Raft_OperationsSnapShotResult) GetSuccess() (v *SnapShotReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsSnapShotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsSnapShotResult) SetSuccess(x interface{}) {
	p.Success = x.(*SnapShotReply)
}

func (p *Raft_OperationsSnapShotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsSnapShotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsSnapShotResult(%+v)", *p)
}

var fieldIDToName_Raft_OperationsSnapShotResult = map[int16]string{
	0: "success",
}
