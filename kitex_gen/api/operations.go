// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
)

type PushRequest struct {
	ProducerId int64  `thrift:"producerId,1" frugal:"1,default,i64" json:"producerId"`
	Topic      string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key        string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Message    string `thrift:"message,4" frugal:"4,default,string" json:"message"`
}

func NewPushRequest() *PushRequest {
	return &PushRequest{}
}

func (p *PushRequest) InitDefault() {
}

func (p *PushRequest) GetProducerId() (v int64) {
	return p.ProducerId
}

func (p *PushRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *PushRequest) GetKey() (v string) {
	return p.Key
}

func (p *PushRequest) GetMessage() (v string) {
	return p.Message
}
func (p *PushRequest) SetProducerId(val int64) {
	p.ProducerId = val
}
func (p *PushRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *PushRequest) SetKey(val string) {
	p.Key = val
}
func (p *PushRequest) SetMessage(val string) {
	p.Message = val
}

func (p *PushRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushRequest(%+v)", *p)
}

var fieldIDToName_PushRequest = map[int16]string{
	1: "producerId",
	2: "topic",
	3: "key",
	4: "message",
}

type PushResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewPushResponse() *PushResponse {
	return &PushResponse{}
}

func (p *PushResponse) InitDefault() {
}

func (p *PushResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *PushResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *PushResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushResponse(%+v)", *p)
}

var fieldIDToName_PushResponse = map[int16]string{
	1: "ret",
}

type PullRequest struct {
	ConsumerId int64  `thrift:"consumerId,1" frugal:"1,default,i64" json:"consumerId"`
	Topic      string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key        string `thrift:"key,3" frugal:"3,default,string" json:"key"`
}

func NewPullRequest() *PullRequest {
	return &PullRequest{}
}

func (p *PullRequest) InitDefault() {
}

func (p *PullRequest) GetConsumerId() (v int64) {
	return p.ConsumerId
}

func (p *PullRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *PullRequest) GetKey() (v string) {
	return p.Key
}
func (p *PullRequest) SetConsumerId(val int64) {
	p.ConsumerId = val
}
func (p *PullRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *PullRequest) SetKey(val string) {
	p.Key = val
}

func (p *PullRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PullRequest(%+v)", *p)
}

var fieldIDToName_PullRequest = map[int16]string{
	1: "consumerId",
	2: "topic",
	3: "key",
}

type PullResponse struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewPullResponse() *PullResponse {
	return &PullResponse{}
}

func (p *PullResponse) InitDefault() {
}

func (p *PullResponse) GetMessage() (v string) {
	return p.Message
}
func (p *PullResponse) SetMessage(val string) {
	p.Message = val
}

func (p *PullResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PullResponse(%+v)", *p)
}

var fieldIDToName_PullResponse = map[int16]string{
	1: "message",
}

type InfoRequest struct {
	IpPort string `thrift:"ip_port,1" frugal:"1,default,string" json:"ip_port"`
}

func NewInfoRequest() *InfoRequest {
	return &InfoRequest{}
}

func (p *InfoRequest) InitDefault() {
}

func (p *InfoRequest) GetIpPort() (v string) {
	return p.IpPort
}
func (p *InfoRequest) SetIpPort(val string) {
	p.IpPort = val
}

func (p *InfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoRequest(%+v)", *p)
}

var fieldIDToName_InfoRequest = map[int16]string{
	1: "ip_port",
}

type InfoResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewInfoResponse() *InfoResponse {
	return &InfoResponse{}
}

func (p *InfoResponse) InitDefault() {
}

func (p *InfoResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *InfoResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *InfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoResponse(%+v)", *p)
}

var fieldIDToName_InfoResponse = map[int16]string{
	1: "ret",
}

type PubRequest struct {
	Msg string `thrift:"msg,1" frugal:"1,default,string" json:"msg"`
}

func NewPubRequest() *PubRequest {
	return &PubRequest{}
}

func (p *PubRequest) InitDefault() {
}

func (p *PubRequest) GetMsg() (v string) {
	return p.Msg
}
func (p *PubRequest) SetMsg(val string) {
	p.Msg = val
}

func (p *PubRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PubRequest(%+v)", *p)
}

var fieldIDToName_PubRequest = map[int16]string{
	1: "msg",
}

type PubResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewPubResponse() *PubResponse {
	return &PubResponse{}
}

func (p *PubResponse) InitDefault() {
}

func (p *PubResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *PubResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *PubResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PubResponse(%+v)", *p)
}

var fieldIDToName_PubResponse = map[int16]string{
	1: "ret",
}

type PingpongRequest struct {
	Ping bool `thrift:"ping,1" frugal:"1,default,bool" json:"ping"`
}

func NewPingpongRequest() *PingpongRequest {
	return &PingpongRequest{}
}

func (p *PingpongRequest) InitDefault() {
}

func (p *PingpongRequest) GetPing() (v bool) {
	return p.Ping
}
func (p *PingpongRequest) SetPing(val bool) {
	p.Ping = val
}

func (p *PingpongRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingpongRequest(%+v)", *p)
}

var fieldIDToName_PingpongRequest = map[int16]string{
	1: "ping",
}

type PingpongResponse struct {
	Pong bool `thrift:"pong,1" frugal:"1,default,bool" json:"pong"`
}

func NewPingpongResponse() *PingpongResponse {
	return &PingpongResponse{}
}

func (p *PingpongResponse) InitDefault() {
}

func (p *PingpongResponse) GetPong() (v bool) {
	return p.Pong
}
func (p *PingpongResponse) SetPong(val bool) {
	p.Pong = val
}

func (p *PingpongResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingpongResponse(%+v)", *p)
}

var fieldIDToName_PingpongResponse = map[int16]string{
	1: "pong",
}

type Server_Operations interface {
	Push(ctx context.Context, req *PushRequest) (r *PushResponse, err error)

	Pill(ctx context.Context, req *PullRequest) (r *PullResponse, err error)

	Info(ctx context.Context, req *InfoRequest) (r *InfoResponse, err error)
}

type Server_OperationsPushArgs struct {
	Req *PushRequest `thrift:"req,1" frugal:"1,default,PushRequest" json:"req"`
}

func NewServer_OperationsPushArgs() *Server_OperationsPushArgs {
	return &Server_OperationsPushArgs{}
}

func (p *Server_OperationsPushArgs) InitDefault() {
}

var Server_OperationsPushArgs_Req_DEFAULT *PushRequest

func (p *Server_OperationsPushArgs) GetReq() (v *PushRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPushArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPushArgs) SetReq(val *PushRequest) {
	p.Req = val
}

func (p *Server_OperationsPushArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPushArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPushArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPushResult struct {
	Success *PushResponse `thrift:"success,0,optional" frugal:"0,optional,PushResponse" json:"success,omitempty"`
}

func NewServer_OperationsPushResult() *Server_OperationsPushResult {
	return &Server_OperationsPushResult{}
}

func (p *Server_OperationsPushResult) InitDefault() {
}

var Server_OperationsPushResult_Success_DEFAULT *PushResponse

func (p *Server_OperationsPushResult) GetSuccess() (v *PushResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPushResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPushResult) SetSuccess(x interface{}) {
	p.Success = x.(*PushResponse)
}

func (p *Server_OperationsPushResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPushResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPushResult = map[int16]string{
	0: "success",
}

type Server_OperationsPillArgs struct {
	Req *PullRequest `thrift:"req,1" frugal:"1,default,PullRequest" json:"req"`
}

func NewServer_OperationsPillArgs() *Server_OperationsPillArgs {
	return &Server_OperationsPillArgs{}
}

func (p *Server_OperationsPillArgs) InitDefault() {
}

var Server_OperationsPillArgs_Req_DEFAULT *PullRequest

func (p *Server_OperationsPillArgs) GetReq() (v *PullRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPillArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPillArgs) SetReq(val *PullRequest) {
	p.Req = val
}

func (p *Server_OperationsPillArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPillArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPillArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPillArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPillResult struct {
	Success *PullResponse `thrift:"success,0,optional" frugal:"0,optional,PullResponse" json:"success,omitempty"`
}

func NewServer_OperationsPillResult() *Server_OperationsPillResult {
	return &Server_OperationsPillResult{}
}

func (p *Server_OperationsPillResult) InitDefault() {
}

var Server_OperationsPillResult_Success_DEFAULT *PullResponse

func (p *Server_OperationsPillResult) GetSuccess() (v *PullResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPillResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPillResult) SetSuccess(x interface{}) {
	p.Success = x.(*PullResponse)
}

func (p *Server_OperationsPillResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPillResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPillResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPillResult = map[int16]string{
	0: "success",
}

type Server_OperationsInfoArgs struct {
	Req *InfoRequest `thrift:"req,1" frugal:"1,default,InfoRequest" json:"req"`
}

func NewServer_OperationsInfoArgs() *Server_OperationsInfoArgs {
	return &Server_OperationsInfoArgs{}
}

func (p *Server_OperationsInfoArgs) InitDefault() {
}

var Server_OperationsInfoArgs_Req_DEFAULT *InfoRequest

func (p *Server_OperationsInfoArgs) GetReq() (v *InfoRequest) {
	if !p.IsSetReq() {
		return Server_OperationsInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsInfoArgs) SetReq(val *InfoRequest) {
	p.Req = val
}

func (p *Server_OperationsInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsInfoArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsInfoArgs = map[int16]string{
	1: "req",
}

type Server_OperationsInfoResult struct {
	Success *InfoResponse `thrift:"success,0,optional" frugal:"0,optional,InfoResponse" json:"success,omitempty"`
}

func NewServer_OperationsInfoResult() *Server_OperationsInfoResult {
	return &Server_OperationsInfoResult{}
}

func (p *Server_OperationsInfoResult) InitDefault() {
}

var Server_OperationsInfoResult_Success_DEFAULT *InfoResponse

func (p *Server_OperationsInfoResult) GetSuccess() (v *InfoResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*InfoResponse)
}

func (p *Server_OperationsInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsInfoResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsInfoResult = map[int16]string{
	0: "success",
}

type Client_Operations interface {
	Pingpong(ctx context.Context, req *PingpongRequest) (r *PingpongResponse, err error)
}

type Client_OperationsPingpongArgs struct {
	Req *PingpongRequest `thrift:"req,1" frugal:"1,default,PingpongRequest" json:"req"`
}

func NewClient_OperationsPingpongArgs() *Client_OperationsPingpongArgs {
	return &Client_OperationsPingpongArgs{}
}

func (p *Client_OperationsPingpongArgs) InitDefault() {
}

var Client_OperationsPingpongArgs_Req_DEFAULT *PingpongRequest

func (p *Client_OperationsPingpongArgs) GetReq() (v *PingpongRequest) {
	if !p.IsSetReq() {
		return Client_OperationsPingpongArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Client_OperationsPingpongArgs) SetReq(val *PingpongRequest) {
	p.Req = val
}

func (p *Client_OperationsPingpongArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Client_OperationsPingpongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPingpongArgs(%+v)", *p)
}

var fieldIDToName_Client_OperationsPingpongArgs = map[int16]string{
	1: "req",
}

type Client_OperationsPingpongResult struct {
	Success *PingpongResponse `thrift:"success,0,optional" frugal:"0,optional,PingpongResponse" json:"success,omitempty"`
}

func NewClient_OperationsPingpongResult() *Client_OperationsPingpongResult {
	return &Client_OperationsPingpongResult{}
}

func (p *Client_OperationsPingpongResult) InitDefault() {
}

var Client_OperationsPingpongResult_Success_DEFAULT *PingpongResponse

func (p *Client_OperationsPingpongResult) GetSuccess() (v *PingpongResponse) {
	if !p.IsSetSuccess() {
		return Client_OperationsPingpongResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Client_OperationsPingpongResult) SetSuccess(x interface{}) {
	p.Success = x.(*PingpongResponse)
}

func (p *Client_OperationsPingpongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Client_OperationsPingpongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPingpongResult(%+v)", *p)
}

var fieldIDToName_Client_OperationsPingpongResult = map[int16]string{
	0: "success",
}
