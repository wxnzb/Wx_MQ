// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
)

type PushRequest struct {
	ProducerId string `thrift:"producerId,1" frugal:"1,default,string" json:"producerId"`
	Topic      string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key        string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Message    []byte `thrift:"message,4" frugal:"4,default,binary" json:"message"`
	StartIndex int64  `thrift:"StartIndex,5" frugal:"5,default,i64" json:"StartIndex"`
	EndIndex   int64  `thrift:"EndIndex,6" frugal:"6,default,i64" json:"EndIndex"`
	Size       int8   `thrift:"Size,7" frugal:"7,default,i8" json:"Size"`
	Ack        int8   `thrift:"Ack,8" frugal:"8,default,i8" json:"Ack"`
	Comindex   int64  `thrift:"Comindex,9" frugal:"9,default,i64" json:"Comindex"`
}

func NewPushRequest() *PushRequest {
	return &PushRequest{}
}

func (p *PushRequest) InitDefault() {
}

func (p *PushRequest) GetProducerId() (v string) {
	return p.ProducerId
}

func (p *PushRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *PushRequest) GetKey() (v string) {
	return p.Key
}

func (p *PushRequest) GetMessage() (v []byte) {
	return p.Message
}

func (p *PushRequest) GetStartIndex() (v int64) {
	return p.StartIndex
}

func (p *PushRequest) GetEndIndex() (v int64) {
	return p.EndIndex
}

func (p *PushRequest) GetSize() (v int8) {
	return p.Size
}

func (p *PushRequest) GetAck() (v int8) {
	return p.Ack
}

func (p *PushRequest) GetComindex() (v int64) {
	return p.Comindex
}
func (p *PushRequest) SetProducerId(val string) {
	p.ProducerId = val
}
func (p *PushRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *PushRequest) SetKey(val string) {
	p.Key = val
}
func (p *PushRequest) SetMessage(val []byte) {
	p.Message = val
}
func (p *PushRequest) SetStartIndex(val int64) {
	p.StartIndex = val
}
func (p *PushRequest) SetEndIndex(val int64) {
	p.EndIndex = val
}
func (p *PushRequest) SetSize(val int8) {
	p.Size = val
}
func (p *PushRequest) SetAck(val int8) {
	p.Ack = val
}
func (p *PushRequest) SetComindex(val int64) {
	p.Comindex = val
}

func (p *PushRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushRequest(%+v)", *p)
}

var fieldIDToName_PushRequest = map[int16]string{
	1: "producerId",
	2: "topic",
	3: "key",
	4: "message",
	5: "StartIndex",
	6: "EndIndex",
	7: "Size",
	8: "Ack",
	9: "Comindex",
}

type PushResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewPushResponse() *PushResponse {
	return &PushResponse{}
}

func (p *PushResponse) InitDefault() {
}

func (p *PushResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *PushResponse) GetErr() (v string) {
	return p.Err
}
func (p *PushResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *PushResponse) SetErr(val string) {
	p.Err = val
}

func (p *PushResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushResponse(%+v)", *p)
}

var fieldIDToName_PushResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type PullRequest struct {
	ConsumerId string `thrift:"consumerId,1" frugal:"1,default,string" json:"consumerId"`
	Topic      string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key        string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Offset     int64  `thrift:"offset,4" frugal:"4,default,i64" json:"offset"`
	Size       int8   `thrift:"size,5" frugal:"5,default,i8" json:"size"`
	Option     int8   `thrift:"option,6" frugal:"6,default,i8" json:"option"`
}

func NewPullRequest() *PullRequest {
	return &PullRequest{}
}

func (p *PullRequest) InitDefault() {
}

func (p *PullRequest) GetConsumerId() (v string) {
	return p.ConsumerId
}

func (p *PullRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *PullRequest) GetKey() (v string) {
	return p.Key
}

func (p *PullRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *PullRequest) GetSize() (v int8) {
	return p.Size
}

func (p *PullRequest) GetOption() (v int8) {
	return p.Option
}
func (p *PullRequest) SetConsumerId(val string) {
	p.ConsumerId = val
}
func (p *PullRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *PullRequest) SetKey(val string) {
	p.Key = val
}
func (p *PullRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *PullRequest) SetSize(val int8) {
	p.Size = val
}
func (p *PullRequest) SetOption(val int8) {
	p.Option = val
}

func (p *PullRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PullRequest(%+v)", *p)
}

var fieldIDToName_PullRequest = map[int16]string{
	1: "consumerId",
	2: "topic",
	3: "key",
	4: "offset",
	5: "size",
	6: "option",
}

type PullResponse struct {
	Msgs       []byte `thrift:"Msgs,1" frugal:"1,default,binary" json:"Msgs"`
	Ret        bool   `thrift:"Ret,2" frugal:"2,default,bool" json:"Ret"`
	StartIndex int64  `thrift:"Start_index,3" frugal:"3,default,i64" json:"Start_index"`
	EndIndex   int64  `thrift:"End_index,4" frugal:"4,default,i64" json:"End_index"`
	Size       int8   `thrift:"Size,5" frugal:"5,default,i8" json:"Size"`
	Err        string `thrift:"Err,6" frugal:"6,default,string" json:"Err"`
}

func NewPullResponse() *PullResponse {
	return &PullResponse{}
}

func (p *PullResponse) InitDefault() {
}

func (p *PullResponse) GetMsgs() (v []byte) {
	return p.Msgs
}

func (p *PullResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *PullResponse) GetStartIndex() (v int64) {
	return p.StartIndex
}

func (p *PullResponse) GetEndIndex() (v int64) {
	return p.EndIndex
}

func (p *PullResponse) GetSize() (v int8) {
	return p.Size
}

func (p *PullResponse) GetErr() (v string) {
	return p.Err
}
func (p *PullResponse) SetMsgs(val []byte) {
	p.Msgs = val
}
func (p *PullResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *PullResponse) SetStartIndex(val int64) {
	p.StartIndex = val
}
func (p *PullResponse) SetEndIndex(val int64) {
	p.EndIndex = val
}
func (p *PullResponse) SetSize(val int8) {
	p.Size = val
}
func (p *PullResponse) SetErr(val string) {
	p.Err = val
}

func (p *PullResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PullResponse(%+v)", *p)
}

var fieldIDToName_PullResponse = map[int16]string{
	1: "Msgs",
	2: "Ret",
	3: "Start_index",
	4: "End_index",
	5: "Size",
	6: "Err",
}

type InfoRequest struct {
	IpPort string `thrift:"ip_port,1" frugal:"1,default,string" json:"ip_port"`
}

func NewInfoRequest() *InfoRequest {
	return &InfoRequest{}
}

func (p *InfoRequest) InitDefault() {
}

func (p *InfoRequest) GetIpPort() (v string) {
	return p.IpPort
}
func (p *InfoRequest) SetIpPort(val string) {
	p.IpPort = val
}

func (p *InfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoRequest(%+v)", *p)
}

var fieldIDToName_InfoRequest = map[int16]string{
	1: "ip_port",
}

type InfoResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewInfoResponse() *InfoResponse {
	return &InfoResponse{}
}

func (p *InfoResponse) InitDefault() {
}

func (p *InfoResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *InfoResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *InfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoResponse(%+v)", *p)
}

var fieldIDToName_InfoResponse = map[int16]string{
	1: "ret",
}

type InfoGetRequest struct {
	Cli_Name       string `thrift:"cli_Name,1" frugal:"1,default,string" json:"cli_Name"`
	Topic_Name     string `thrift:"topic_Name,2" frugal:"2,default,string" json:"topic_Name"`
	Partition_Name string `thrift:"partition_Name,3" frugal:"3,default,string" json:"partition_Name"`
	Offset         int64  `thrift:"offset,4" frugal:"4,default,i64" json:"offset"`
	Option         int8   `thrift:"option,5" frugal:"5,default,i8" json:"option"`
}

func NewInfoGetRequest() *InfoGetRequest {
	return &InfoGetRequest{}
}

func (p *InfoGetRequest) InitDefault() {
}

func (p *InfoGetRequest) GetCli_Name() (v string) {
	return p.Cli_Name
}

func (p *InfoGetRequest) GetTopic_Name() (v string) {
	return p.Topic_Name
}

func (p *InfoGetRequest) GetPartition_Name() (v string) {
	return p.Partition_Name
}

func (p *InfoGetRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *InfoGetRequest) GetOption() (v int8) {
	return p.Option
}
func (p *InfoGetRequest) SetCli_Name(val string) {
	p.Cli_Name = val
}
func (p *InfoGetRequest) SetTopic_Name(val string) {
	p.Topic_Name = val
}
func (p *InfoGetRequest) SetPartition_Name(val string) {
	p.Partition_Name = val
}
func (p *InfoGetRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *InfoGetRequest) SetOption(val int8) {
	p.Option = val
}

func (p *InfoGetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoGetRequest(%+v)", *p)
}

var fieldIDToName_InfoGetRequest = map[int16]string{
	1: "cli_Name",
	2: "topic_Name",
	3: "partition_Name",
	4: "offset",
	5: "option",
}

type InfoGetResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewInfoGetResponse() *InfoGetResponse {
	return &InfoGetResponse{}
}

func (p *InfoGetResponse) InitDefault() {
}

func (p *InfoGetResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *InfoGetResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *InfoGetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoGetResponse(%+v)", *p)
}

var fieldIDToName_InfoGetResponse = map[int16]string{
	1: "ret",
}

type PrepareAcceptRequest struct {
	Topic_Name     string `thrift:"topic_Name,1" frugal:"1,default,string" json:"topic_Name"`
	Partition_Name string `thrift:"partition_Name,2" frugal:"2,default,string" json:"partition_Name"`
	File_Name      string `thrift:"file_Name,3" frugal:"3,default,string" json:"file_Name"`
}

func NewPrepareAcceptRequest() *PrepareAcceptRequest {
	return &PrepareAcceptRequest{}
}

func (p *PrepareAcceptRequest) InitDefault() {
}

func (p *PrepareAcceptRequest) GetTopic_Name() (v string) {
	return p.Topic_Name
}

func (p *PrepareAcceptRequest) GetPartition_Name() (v string) {
	return p.Partition_Name
}

func (p *PrepareAcceptRequest) GetFile_Name() (v string) {
	return p.File_Name
}
func (p *PrepareAcceptRequest) SetTopic_Name(val string) {
	p.Topic_Name = val
}
func (p *PrepareAcceptRequest) SetPartition_Name(val string) {
	p.Partition_Name = val
}
func (p *PrepareAcceptRequest) SetFile_Name(val string) {
	p.File_Name = val
}

func (p *PrepareAcceptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareAcceptRequest(%+v)", *p)
}

var fieldIDToName_PrepareAcceptRequest = map[int16]string{
	1: "topic_Name",
	2: "partition_Name",
	3: "file_Name",
}

type PrepareAcceptResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewPrepareAcceptResponse() *PrepareAcceptResponse {
	return &PrepareAcceptResponse{}
}

func (p *PrepareAcceptResponse) InitDefault() {
}

func (p *PrepareAcceptResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *PrepareAcceptResponse) GetErr() (v string) {
	return p.Err
}
func (p *PrepareAcceptResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *PrepareAcceptResponse) SetErr(val string) {
	p.Err = val
}

func (p *PrepareAcceptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareAcceptResponse(%+v)", *p)
}

var fieldIDToName_PrepareAcceptResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type PrepareSendRequest struct {
	Topic_Name     string `thrift:"topic_Name,1" frugal:"1,default,string" json:"topic_Name"`
	Partition_Name string `thrift:"partition_Name,2" frugal:"2,default,string" json:"partition_Name"`
	File_Name      string `thrift:"file_Name,3" frugal:"3,default,string" json:"file_Name"`
	Offset         int64  `thrift:"offset,4" frugal:"4,default,i64" json:"offset"`
	Option         int8   `thrift:"option,5" frugal:"5,default,i8" json:"option"`
}

func NewPrepareSendRequest() *PrepareSendRequest {
	return &PrepareSendRequest{}
}

func (p *PrepareSendRequest) InitDefault() {
}

func (p *PrepareSendRequest) GetTopic_Name() (v string) {
	return p.Topic_Name
}

func (p *PrepareSendRequest) GetPartition_Name() (v string) {
	return p.Partition_Name
}

func (p *PrepareSendRequest) GetFile_Name() (v string) {
	return p.File_Name
}

func (p *PrepareSendRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *PrepareSendRequest) GetOption() (v int8) {
	return p.Option
}
func (p *PrepareSendRequest) SetTopic_Name(val string) {
	p.Topic_Name = val
}
func (p *PrepareSendRequest) SetPartition_Name(val string) {
	p.Partition_Name = val
}
func (p *PrepareSendRequest) SetFile_Name(val string) {
	p.File_Name = val
}
func (p *PrepareSendRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *PrepareSendRequest) SetOption(val int8) {
	p.Option = val
}

func (p *PrepareSendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareSendRequest(%+v)", *p)
}

var fieldIDToName_PrepareSendRequest = map[int16]string{
	1: "topic_Name",
	2: "partition_Name",
	3: "file_Name",
	4: "offset",
	5: "option",
}

type PrepareSendResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewPrepareSendResponse() *PrepareSendResponse {
	return &PrepareSendResponse{}
}

func (p *PrepareSendResponse) InitDefault() {
}

func (p *PrepareSendResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *PrepareSendResponse) GetErr() (v string) {
	return p.Err
}
func (p *PrepareSendResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *PrepareSendResponse) SetErr(val string) {
	p.Err = val
}

func (p *PrepareSendResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareSendResponse(%+v)", *p)
}

var fieldIDToName_PrepareSendResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type PubRequest struct {
	TopicName     string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartitionName string `thrift:"partition_name,2" frugal:"2,default,string" json:"partition_name"`
	StartIndex    int64  `thrift:"start_index,3" frugal:"3,default,i64" json:"start_index"`
	EndIndex      int64  `thrift:"end_index,4" frugal:"4,default,i64" json:"end_index"`
	Msg           []byte `thrift:"msg,5" frugal:"5,default,binary" json:"msg"`
}

func NewPubRequest() *PubRequest {
	return &PubRequest{}
}

func (p *PubRequest) InitDefault() {
}

func (p *PubRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *PubRequest) GetPartitionName() (v string) {
	return p.PartitionName
}

func (p *PubRequest) GetStartIndex() (v int64) {
	return p.StartIndex
}

func (p *PubRequest) GetEndIndex() (v int64) {
	return p.EndIndex
}

func (p *PubRequest) GetMsg() (v []byte) {
	return p.Msg
}
func (p *PubRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *PubRequest) SetPartitionName(val string) {
	p.PartitionName = val
}
func (p *PubRequest) SetStartIndex(val int64) {
	p.StartIndex = val
}
func (p *PubRequest) SetEndIndex(val int64) {
	p.EndIndex = val
}
func (p *PubRequest) SetMsg(val []byte) {
	p.Msg = val
}

func (p *PubRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PubRequest(%+v)", *p)
}

var fieldIDToName_PubRequest = map[int16]string{
	1: "topic_name",
	2: "partition_name",
	3: "start_index",
	4: "end_index",
	5: "msg",
}

type PubResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewPubResponse() *PubResponse {
	return &PubResponse{}
}

func (p *PubResponse) InitDefault() {
}

func (p *PubResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *PubResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *PubResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PubResponse(%+v)", *p)
}

var fieldIDToName_PubResponse = map[int16]string{
	1: "ret",
}

type PingpongRequest struct {
	Ping bool `thrift:"ping,1" frugal:"1,default,bool" json:"ping"`
}

func NewPingpongRequest() *PingpongRequest {
	return &PingpongRequest{}
}

func (p *PingpongRequest) InitDefault() {
}

func (p *PingpongRequest) GetPing() (v bool) {
	return p.Ping
}
func (p *PingpongRequest) SetPing(val bool) {
	p.Ping = val
}

func (p *PingpongRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingpongRequest(%+v)", *p)
}

var fieldIDToName_PingpongRequest = map[int16]string{
	1: "ping",
}

type PingpongResponse struct {
	Pong bool `thrift:"pong,1" frugal:"1,default,bool" json:"pong"`
}

func NewPingpongResponse() *PingpongResponse {
	return &PingpongResponse{}
}

func (p *PingpongResponse) InitDefault() {
}

func (p *PingpongResponse) GetPong() (v bool) {
	return p.Pong
}
func (p *PingpongResponse) SetPong(val bool) {
	p.Pong = val
}

func (p *PingpongResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingpongResponse(%+v)", *p)
}

var fieldIDToName_PingpongResponse = map[int16]string{
	1: "pong",
}

type ProGetBroRequest struct {
	TopicName     string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartitionName string `thrift:"partition_name,2" frugal:"2,default,string" json:"partition_name"`
}

func NewProGetBroRequest() *ProGetBroRequest {
	return &ProGetBroRequest{}
}

func (p *ProGetBroRequest) InitDefault() {
}

func (p *ProGetBroRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *ProGetBroRequest) GetPartitionName() (v string) {
	return p.PartitionName
}
func (p *ProGetBroRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *ProGetBroRequest) SetPartitionName(val string) {
	p.PartitionName = val
}

func (p *ProGetBroRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProGetBroRequest(%+v)", *p)
}

var fieldIDToName_ProGetBroRequest = map[int16]string{
	1: "topic_name",
	2: "partition_name",
}

type ProGetBroResponse struct {
	Ret         bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	BroHostPort string `thrift:"bro_host_port,2" frugal:"2,default,string" json:"bro_host_port"`
}

func NewProGetBroResponse() *ProGetBroResponse {
	return &ProGetBroResponse{}
}

func (p *ProGetBroResponse) InitDefault() {
}

func (p *ProGetBroResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *ProGetBroResponse) GetBroHostPort() (v string) {
	return p.BroHostPort
}
func (p *ProGetBroResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *ProGetBroResponse) SetBroHostPort(val string) {
	p.BroHostPort = val
}

func (p *ProGetBroResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProGetBroResponse(%+v)", *p)
}

var fieldIDToName_ProGetBroResponse = map[int16]string{
	1: "ret",
	2: "bro_host_port",
}

type ProSetPartStateRequest struct {
	Topic     string `thrift:"topic,1" frugal:"1,default,string" json:"topic"`
	Partition string `thrift:"partition,2" frugal:"2,default,string" json:"partition"`
	Option    int8   `thrift:"option,3" frugal:"3,default,i8" json:"option"`
	Dupnum    int8   `thrift:"dupnum,4" frugal:"4,default,i8" json:"dupnum"`
}

func NewProSetPartStateRequest() *ProSetPartStateRequest {
	return &ProSetPartStateRequest{}
}

func (p *ProSetPartStateRequest) InitDefault() {
}

func (p *ProSetPartStateRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *ProSetPartStateRequest) GetPartition() (v string) {
	return p.Partition
}

func (p *ProSetPartStateRequest) GetOption() (v int8) {
	return p.Option
}

func (p *ProSetPartStateRequest) GetDupnum() (v int8) {
	return p.Dupnum
}
func (p *ProSetPartStateRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *ProSetPartStateRequest) SetPartition(val string) {
	p.Partition = val
}
func (p *ProSetPartStateRequest) SetOption(val int8) {
	p.Option = val
}
func (p *ProSetPartStateRequest) SetDupnum(val int8) {
	p.Dupnum = val
}

func (p *ProSetPartStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProSetPartStateRequest(%+v)", *p)
}

var fieldIDToName_ProSetPartStateRequest = map[int16]string{
	1: "topic",
	2: "partition",
	3: "option",
	4: "dupnum",
}

type ProSetPartStateResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewProSetPartStateResponse() *ProSetPartStateResponse {
	return &ProSetPartStateResponse{}
}

func (p *ProSetPartStateResponse) InitDefault() {
}

func (p *ProSetPartStateResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *ProSetPartStateResponse) GetErr() (v string) {
	return p.Err
}
func (p *ProSetPartStateResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *ProSetPartStateResponse) SetErr(val string) {
	p.Err = val
}

func (p *ProSetPartStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProSetPartStateResponse(%+v)", *p)
}

var fieldIDToName_ProSetPartStateResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type ConGetBroRequest struct {
	TopicName     string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartitionName string `thrift:"partition_name,2" frugal:"2,default,string" json:"partition_name"`
	Option        int8   `thrift:"option,3" frugal:"3,default,i8" json:"option"`
	CliName       string `thrift:"cli_name,4" frugal:"4,default,string" json:"cli_name"`
	Index         int64  `thrift:"index,5" frugal:"5,default,i64" json:"index"`
}

func NewConGetBroRequest() *ConGetBroRequest {
	return &ConGetBroRequest{}
}

func (p *ConGetBroRequest) InitDefault() {
}

func (p *ConGetBroRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *ConGetBroRequest) GetPartitionName() (v string) {
	return p.PartitionName
}

func (p *ConGetBroRequest) GetOption() (v int8) {
	return p.Option
}

func (p *ConGetBroRequest) GetCliName() (v string) {
	return p.CliName
}

func (p *ConGetBroRequest) GetIndex() (v int64) {
	return p.Index
}
func (p *ConGetBroRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *ConGetBroRequest) SetPartitionName(val string) {
	p.PartitionName = val
}
func (p *ConGetBroRequest) SetOption(val int8) {
	p.Option = val
}
func (p *ConGetBroRequest) SetCliName(val string) {
	p.CliName = val
}
func (p *ConGetBroRequest) SetIndex(val int64) {
	p.Index = val
}

func (p *ConGetBroRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConGetBroRequest(%+v)", *p)
}

var fieldIDToName_ConGetBroRequest = map[int16]string{
	1: "topic_name",
	2: "partition_name",
	3: "option",
	4: "cli_name",
	5: "index",
}

type ConGetBroResponse struct {
	Ret   bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Size  int64  `thrift:"size,2" frugal:"2,default,i64" json:"size"`
	Parts []byte `thrift:"parts,3" frugal:"3,default,binary" json:"parts"`
}

func NewConGetBroResponse() *ConGetBroResponse {
	return &ConGetBroResponse{}
}

func (p *ConGetBroResponse) InitDefault() {
}

func (p *ConGetBroResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *ConGetBroResponse) GetSize() (v int64) {
	return p.Size
}

func (p *ConGetBroResponse) GetParts() (v []byte) {
	return p.Parts
}
func (p *ConGetBroResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *ConGetBroResponse) SetSize(val int64) {
	p.Size = val
}
func (p *ConGetBroResponse) SetParts(val []byte) {
	p.Parts = val
}

func (p *ConGetBroResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConGetBroResponse(%+v)", *p)
}

var fieldIDToName_ConGetBroResponse = map[int16]string{
	1: "ret",
	2: "size",
	3: "parts",
}

type SubRequest struct {
	Consumer string `thrift:"consumer,1" frugal:"1,default,string" json:"consumer"`
	Topic    string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key      string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Option   int8   `thrift:"option,4" frugal:"4,default,i8" json:"option"`
}

func NewSubRequest() *SubRequest {
	return &SubRequest{}
}

func (p *SubRequest) InitDefault() {
}

func (p *SubRequest) GetConsumer() (v string) {
	return p.Consumer
}

func (p *SubRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *SubRequest) GetKey() (v string) {
	return p.Key
}

func (p *SubRequest) GetOption() (v int8) {
	return p.Option
}
func (p *SubRequest) SetConsumer(val string) {
	p.Consumer = val
}
func (p *SubRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *SubRequest) SetKey(val string) {
	p.Key = val
}
func (p *SubRequest) SetOption(val int8) {
	p.Option = val
}

func (p *SubRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubRequest(%+v)", *p)
}

var fieldIDToName_SubRequest = map[int16]string{
	1: "consumer",
	2: "topic",
	3: "key",
	4: "option",
}

type SubResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewSubResponse() *SubResponse {
	return &SubResponse{}
}

func (p *SubResponse) InitDefault() {
}

func (p *SubResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *SubResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *SubResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubResponse(%+v)", *p)
}

var fieldIDToName_SubResponse = map[int16]string{
	1: "ret",
}

type BroInfoRequest struct {
	BroName     string `thrift:"bro_name,1" frugal:"1,default,string" json:"bro_name"`
	BroHostPort string `thrift:"bro_host_port,2" frugal:"2,default,string" json:"bro_host_port"`
}

func NewBroInfoRequest() *BroInfoRequest {
	return &BroInfoRequest{}
}

func (p *BroInfoRequest) InitDefault() {
}

func (p *BroInfoRequest) GetBroName() (v string) {
	return p.BroName
}

func (p *BroInfoRequest) GetBroHostPort() (v string) {
	return p.BroHostPort
}
func (p *BroInfoRequest) SetBroName(val string) {
	p.BroName = val
}
func (p *BroInfoRequest) SetBroHostPort(val string) {
	p.BroHostPort = val
}

func (p *BroInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroInfoRequest(%+v)", *p)
}

var fieldIDToName_BroInfoRequest = map[int16]string{
	1: "bro_name",
	2: "bro_host_port",
}

type BroInfoResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewBroInfoResponse() *BroInfoResponse {
	return &BroInfoResponse{}
}

func (p *BroInfoResponse) InitDefault() {
}

func (p *BroInfoResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *BroInfoResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *BroInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroInfoResponse(%+v)", *p)
}

var fieldIDToName_BroInfoResponse = map[int16]string{
	1: "ret",
}

type BroGetAssignRequest struct {
	Brokerpower []byte `thrift:"brokerpower,1" frugal:"1,default,binary" json:"brokerpower"`
}

func NewBroGetAssignRequest() *BroGetAssignRequest {
	return &BroGetAssignRequest{}
}

func (p *BroGetAssignRequest) InitDefault() {
}

func (p *BroGetAssignRequest) GetBrokerpower() (v []byte) {
	return p.Brokerpower
}
func (p *BroGetAssignRequest) SetBrokerpower(val []byte) {
	p.Brokerpower = val
}

func (p *BroGetAssignRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroGetAssignRequest(%+v)", *p)
}

var fieldIDToName_BroGetAssignRequest = map[int16]string{
	1: "brokerpower",
}

type BroGetAssignResponse struct {
	Ret        bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Assignment []byte `thrift:"assignment,2" frugal:"2,default,binary" json:"assignment"`
}

func NewBroGetAssignResponse() *BroGetAssignResponse {
	return &BroGetAssignResponse{}
}

func (p *BroGetAssignResponse) InitDefault() {
}

func (p *BroGetAssignResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *BroGetAssignResponse) GetAssignment() (v []byte) {
	return p.Assignment
}
func (p *BroGetAssignResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *BroGetAssignResponse) SetAssignment(val []byte) {
	p.Assignment = val
}

func (p *BroGetAssignResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroGetAssignResponse(%+v)", *p)
}

var fieldIDToName_BroGetAssignResponse = map[int16]string{
	1: "ret",
	2: "assignment",
}

type UpdateOffsetRequest struct {
	Topic  string `thrift:"topic,1" frugal:"1,default,string" json:"topic"`
	Part   string `thrift:"part,2" frugal:"2,default,string" json:"part"`
	Offset int64  `thrift:"offset,3" frugal:"3,default,i64" json:"offset"`
}

func NewUpdateOffsetRequest() *UpdateOffsetRequest {
	return &UpdateOffsetRequest{}
}

func (p *UpdateOffsetRequest) InitDefault() {
}

func (p *UpdateOffsetRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *UpdateOffsetRequest) GetPart() (v string) {
	return p.Part
}

func (p *UpdateOffsetRequest) GetOffset() (v int64) {
	return p.Offset
}
func (p *UpdateOffsetRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *UpdateOffsetRequest) SetPart(val string) {
	p.Part = val
}
func (p *UpdateOffsetRequest) SetOffset(val int64) {
	p.Offset = val
}

func (p *UpdateOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOffsetRequest(%+v)", *p)
}

var fieldIDToName_UpdateOffsetRequest = map[int16]string{
	1: "topic",
	2: "part",
	3: "offset",
}

type UpdateOffsetResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewUpdateOffsetResponse() *UpdateOffsetResponse {
	return &UpdateOffsetResponse{}
}

func (p *UpdateOffsetResponse) InitDefault() {
}

func (p *UpdateOffsetResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *UpdateOffsetResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *UpdateOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOffsetResponse(%+v)", *p)
}

var fieldIDToName_UpdateOffsetResponse = map[int16]string{
	1: "ret",
}

type UpdateDupRequest struct {
	Topic      string `thrift:"topic,1" frugal:"1,default,string" json:"topic"`
	Part       string `thrift:"part,2" frugal:"2,default,string" json:"part"`
	BrokerName string `thrift:"brokerName,3" frugal:"3,default,string" json:"brokerName"`
	BlockName  string `thrift:"blockName,4" frugal:"4,default,string" json:"blockName"`
	EndIndex   int64  `thrift:"EndIndex,5" frugal:"5,default,i64" json:"EndIndex"`
	Leader     bool   `thrift:"leader,6" frugal:"6,default,bool" json:"leader"`
}

func NewUpdateDupRequest() *UpdateDupRequest {
	return &UpdateDupRequest{}
}

func (p *UpdateDupRequest) InitDefault() {
}

func (p *UpdateDupRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *UpdateDupRequest) GetPart() (v string) {
	return p.Part
}

func (p *UpdateDupRequest) GetBrokerName() (v string) {
	return p.BrokerName
}

func (p *UpdateDupRequest) GetBlockName() (v string) {
	return p.BlockName
}

func (p *UpdateDupRequest) GetEndIndex() (v int64) {
	return p.EndIndex
}

func (p *UpdateDupRequest) GetLeader() (v bool) {
	return p.Leader
}
func (p *UpdateDupRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *UpdateDupRequest) SetPart(val string) {
	p.Part = val
}
func (p *UpdateDupRequest) SetBrokerName(val string) {
	p.BrokerName = val
}
func (p *UpdateDupRequest) SetBlockName(val string) {
	p.BlockName = val
}
func (p *UpdateDupRequest) SetEndIndex(val int64) {
	p.EndIndex = val
}
func (p *UpdateDupRequest) SetLeader(val bool) {
	p.Leader = val
}

func (p *UpdateDupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDupRequest(%+v)", *p)
}

var fieldIDToName_UpdateDupRequest = map[int16]string{
	1: "topic",
	2: "part",
	3: "brokerName",
	4: "blockName",
	5: "EndIndex",
	6: "leader",
}

type UpdateDupResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewUpdateDupResponse() *UpdateDupResponse {
	return &UpdateDupResponse{}
}

func (p *UpdateDupResponse) InitDefault() {
}

func (p *UpdateDupResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *UpdateDupResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *UpdateDupResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDupResponse(%+v)", *p)
}

var fieldIDToName_UpdateDupResponse = map[int16]string{
	1: "ret",
}

type ConStartGetBroRequest struct {
	Topic   string `thrift:"topic,1" frugal:"1,default,string" json:"topic"`
	Part    string `thrift:"part,2" frugal:"2,default,string" json:"part"`
	Offset  int64  `thrift:"offset,3" frugal:"3,default,i64" json:"offset"`
	Option  int8   `thrift:"option,4" frugal:"4,default,i8" json:"option"`
	CliName string `thrift:"cli_name,5" frugal:"5,default,string" json:"cli_name"`
}

func NewConStartGetBroRequest() *ConStartGetBroRequest {
	return &ConStartGetBroRequest{}
}

func (p *ConStartGetBroRequest) InitDefault() {
}

func (p *ConStartGetBroRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *ConStartGetBroRequest) GetPart() (v string) {
	return p.Part
}

func (p *ConStartGetBroRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *ConStartGetBroRequest) GetOption() (v int8) {
	return p.Option
}

func (p *ConStartGetBroRequest) GetCliName() (v string) {
	return p.CliName
}
func (p *ConStartGetBroRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *ConStartGetBroRequest) SetPart(val string) {
	p.Part = val
}
func (p *ConStartGetBroRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *ConStartGetBroRequest) SetOption(val int8) {
	p.Option = val
}
func (p *ConStartGetBroRequest) SetCliName(val string) {
	p.CliName = val
}

func (p *ConStartGetBroRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConStartGetBroRequest(%+v)", *p)
}

var fieldIDToName_ConStartGetBroRequest = map[int16]string{
	1: "topic",
	2: "part",
	3: "offset",
	4: "option",
	5: "cli_name",
}

type ConStartGetBroResponse struct {
	Ret   bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Size  int64  `thrift:"size,2" frugal:"2,default,i64" json:"size"`
	Parts []byte `thrift:"parts,3" frugal:"3,default,binary" json:"parts"`
}

func NewConStartGetBroResponse() *ConStartGetBroResponse {
	return &ConStartGetBroResponse{}
}

func (p *ConStartGetBroResponse) InitDefault() {
}

func (p *ConStartGetBroResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *ConStartGetBroResponse) GetSize() (v int64) {
	return p.Size
}

func (p *ConStartGetBroResponse) GetParts() (v []byte) {
	return p.Parts
}
func (p *ConStartGetBroResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *ConStartGetBroResponse) SetSize(val int64) {
	p.Size = val
}
func (p *ConStartGetBroResponse) SetParts(val []byte) {
	p.Parts = val
}

func (p *ConStartGetBroResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConStartGetBroResponse(%+v)", *p)
}

var fieldIDToName_ConStartGetBroResponse = map[int16]string{
	1: "ret",
	2: "size",
	3: "parts",
}

type CreateTopicRequest struct {
	TopicName string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
}

func NewCreateTopicRequest() *CreateTopicRequest {
	return &CreateTopicRequest{}
}

func (p *CreateTopicRequest) InitDefault() {
}

func (p *CreateTopicRequest) GetTopicName() (v string) {
	return p.TopicName
}
func (p *CreateTopicRequest) SetTopicName(val string) {
	p.TopicName = val
}

func (p *CreateTopicRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicRequest(%+v)", *p)
}

var fieldIDToName_CreateTopicRequest = map[int16]string{
	1: "topic_name",
}

type CreateTopicResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewCreateTopicResponse() *CreateTopicResponse {
	return &CreateTopicResponse{}
}

func (p *CreateTopicResponse) InitDefault() {
}

func (p *CreateTopicResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *CreateTopicResponse) GetErr() (v string) {
	return p.Err
}
func (p *CreateTopicResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *CreateTopicResponse) SetErr(val string) {
	p.Err = val
}

func (p *CreateTopicResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicResponse(%+v)", *p)
}

var fieldIDToName_CreateTopicResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type CreatePartitionRequest struct {
	TopicName     string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartitionName string `thrift:"partition_name,2" frugal:"2,default,string" json:"partition_name"`
}

func NewCreatePartitionRequest() *CreatePartitionRequest {
	return &CreatePartitionRequest{}
}

func (p *CreatePartitionRequest) InitDefault() {
}

func (p *CreatePartitionRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *CreatePartitionRequest) GetPartitionName() (v string) {
	return p.PartitionName
}
func (p *CreatePartitionRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *CreatePartitionRequest) SetPartitionName(val string) {
	p.PartitionName = val
}

func (p *CreatePartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePartitionRequest(%+v)", *p)
}

var fieldIDToName_CreatePartitionRequest = map[int16]string{
	1: "topic_name",
	2: "partition_name",
}

type CreatePartitionResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewCreatePartitionResponse() *CreatePartitionResponse {
	return &CreatePartitionResponse{}
}

func (p *CreatePartitionResponse) InitDefault() {
}

func (p *CreatePartitionResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *CreatePartitionResponse) GetErr() (v string) {
	return p.Err
}
func (p *CreatePartitionResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *CreatePartitionResponse) SetErr(val string) {
	p.Err = val
}

func (p *CreatePartitionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePartitionResponse(%+v)", *p)
}

var fieldIDToName_CreatePartitionResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type Server_Operations interface {
	Push(ctx context.Context, req *PushRequest) (r *PushResponse, err error)

	Pull(ctx context.Context, req *PullRequest) (r *PullResponse, err error)

	Info(ctx context.Context, req *InfoRequest) (r *InfoResponse, err error)

	StarttoGet(ctx context.Context, req *InfoGetRequest) (r *InfoGetResponse, err error)

	PrepareAccept(ctx context.Context, req *PrepareAcceptRequest) (r *PrepareAcceptResponse, err error)

	PrepareSend(ctx context.Context, req *PrepareSendRequest) (r *PrepareSendResponse, err error)
}

type Server_OperationsPushArgs struct {
	Req *PushRequest `thrift:"req,1" frugal:"1,default,PushRequest" json:"req"`
}

func NewServer_OperationsPushArgs() *Server_OperationsPushArgs {
	return &Server_OperationsPushArgs{}
}

func (p *Server_OperationsPushArgs) InitDefault() {
}

var Server_OperationsPushArgs_Req_DEFAULT *PushRequest

func (p *Server_OperationsPushArgs) GetReq() (v *PushRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPushArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPushArgs) SetReq(val *PushRequest) {
	p.Req = val
}

func (p *Server_OperationsPushArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPushArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPushArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPushResult struct {
	Success *PushResponse `thrift:"success,0,optional" frugal:"0,optional,PushResponse" json:"success,omitempty"`
}

func NewServer_OperationsPushResult() *Server_OperationsPushResult {
	return &Server_OperationsPushResult{}
}

func (p *Server_OperationsPushResult) InitDefault() {
}

var Server_OperationsPushResult_Success_DEFAULT *PushResponse

func (p *Server_OperationsPushResult) GetSuccess() (v *PushResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPushResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPushResult) SetSuccess(x interface{}) {
	p.Success = x.(*PushResponse)
}

func (p *Server_OperationsPushResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPushResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPushResult = map[int16]string{
	0: "success",
}

type Server_OperationsPullArgs struct {
	Req *PullRequest `thrift:"req,1" frugal:"1,default,PullRequest" json:"req"`
}

func NewServer_OperationsPullArgs() *Server_OperationsPullArgs {
	return &Server_OperationsPullArgs{}
}

func (p *Server_OperationsPullArgs) InitDefault() {
}

var Server_OperationsPullArgs_Req_DEFAULT *PullRequest

func (p *Server_OperationsPullArgs) GetReq() (v *PullRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPullArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPullArgs) SetReq(val *PullRequest) {
	p.Req = val
}

func (p *Server_OperationsPullArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPullArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPullArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPullArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPullResult struct {
	Success *PullResponse `thrift:"success,0,optional" frugal:"0,optional,PullResponse" json:"success,omitempty"`
}

func NewServer_OperationsPullResult() *Server_OperationsPullResult {
	return &Server_OperationsPullResult{}
}

func (p *Server_OperationsPullResult) InitDefault() {
}

var Server_OperationsPullResult_Success_DEFAULT *PullResponse

func (p *Server_OperationsPullResult) GetSuccess() (v *PullResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPullResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPullResult) SetSuccess(x interface{}) {
	p.Success = x.(*PullResponse)
}

func (p *Server_OperationsPullResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPullResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPullResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPullResult = map[int16]string{
	0: "success",
}

type Server_OperationsInfoArgs struct {
	Req *InfoRequest `thrift:"req,1" frugal:"1,default,InfoRequest" json:"req"`
}

func NewServer_OperationsInfoArgs() *Server_OperationsInfoArgs {
	return &Server_OperationsInfoArgs{}
}

func (p *Server_OperationsInfoArgs) InitDefault() {
}

var Server_OperationsInfoArgs_Req_DEFAULT *InfoRequest

func (p *Server_OperationsInfoArgs) GetReq() (v *InfoRequest) {
	if !p.IsSetReq() {
		return Server_OperationsInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsInfoArgs) SetReq(val *InfoRequest) {
	p.Req = val
}

func (p *Server_OperationsInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsInfoArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsInfoArgs = map[int16]string{
	1: "req",
}

type Server_OperationsInfoResult struct {
	Success *InfoResponse `thrift:"success,0,optional" frugal:"0,optional,InfoResponse" json:"success,omitempty"`
}

func NewServer_OperationsInfoResult() *Server_OperationsInfoResult {
	return &Server_OperationsInfoResult{}
}

func (p *Server_OperationsInfoResult) InitDefault() {
}

var Server_OperationsInfoResult_Success_DEFAULT *InfoResponse

func (p *Server_OperationsInfoResult) GetSuccess() (v *InfoResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*InfoResponse)
}

func (p *Server_OperationsInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsInfoResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsInfoResult = map[int16]string{
	0: "success",
}

type Server_OperationsStarttoGetArgs struct {
	Req *InfoGetRequest `thrift:"req,1" frugal:"1,default,InfoGetRequest" json:"req"`
}

func NewServer_OperationsStarttoGetArgs() *Server_OperationsStarttoGetArgs {
	return &Server_OperationsStarttoGetArgs{}
}

func (p *Server_OperationsStarttoGetArgs) InitDefault() {
}

var Server_OperationsStarttoGetArgs_Req_DEFAULT *InfoGetRequest

func (p *Server_OperationsStarttoGetArgs) GetReq() (v *InfoGetRequest) {
	if !p.IsSetReq() {
		return Server_OperationsStarttoGetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsStarttoGetArgs) SetReq(val *InfoGetRequest) {
	p.Req = val
}

func (p *Server_OperationsStarttoGetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsStarttoGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsStarttoGetArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsStarttoGetArgs = map[int16]string{
	1: "req",
}

type Server_OperationsStarttoGetResult struct {
	Success *InfoGetResponse `thrift:"success,0,optional" frugal:"0,optional,InfoGetResponse" json:"success,omitempty"`
}

func NewServer_OperationsStarttoGetResult() *Server_OperationsStarttoGetResult {
	return &Server_OperationsStarttoGetResult{}
}

func (p *Server_OperationsStarttoGetResult) InitDefault() {
}

var Server_OperationsStarttoGetResult_Success_DEFAULT *InfoGetResponse

func (p *Server_OperationsStarttoGetResult) GetSuccess() (v *InfoGetResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsStarttoGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsStarttoGetResult) SetSuccess(x interface{}) {
	p.Success = x.(*InfoGetResponse)
}

func (p *Server_OperationsStarttoGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsStarttoGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsStarttoGetResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsStarttoGetResult = map[int16]string{
	0: "success",
}

type Server_OperationsPrepareAcceptArgs struct {
	Req *PrepareAcceptRequest `thrift:"req,1" frugal:"1,default,PrepareAcceptRequest" json:"req"`
}

func NewServer_OperationsPrepareAcceptArgs() *Server_OperationsPrepareAcceptArgs {
	return &Server_OperationsPrepareAcceptArgs{}
}

func (p *Server_OperationsPrepareAcceptArgs) InitDefault() {
}

var Server_OperationsPrepareAcceptArgs_Req_DEFAULT *PrepareAcceptRequest

func (p *Server_OperationsPrepareAcceptArgs) GetReq() (v *PrepareAcceptRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPrepareAcceptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPrepareAcceptArgs) SetReq(val *PrepareAcceptRequest) {
	p.Req = val
}

func (p *Server_OperationsPrepareAcceptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPrepareAcceptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareAcceptArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareAcceptArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPrepareAcceptResult struct {
	Success *PrepareAcceptResponse `thrift:"success,0,optional" frugal:"0,optional,PrepareAcceptResponse" json:"success,omitempty"`
}

func NewServer_OperationsPrepareAcceptResult() *Server_OperationsPrepareAcceptResult {
	return &Server_OperationsPrepareAcceptResult{}
}

func (p *Server_OperationsPrepareAcceptResult) InitDefault() {
}

var Server_OperationsPrepareAcceptResult_Success_DEFAULT *PrepareAcceptResponse

func (p *Server_OperationsPrepareAcceptResult) GetSuccess() (v *PrepareAcceptResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPrepareAcceptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPrepareAcceptResult) SetSuccess(x interface{}) {
	p.Success = x.(*PrepareAcceptResponse)
}

func (p *Server_OperationsPrepareAcceptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPrepareAcceptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareAcceptResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareAcceptResult = map[int16]string{
	0: "success",
}

type Server_OperationsPrepareSendArgs struct {
	Req *PrepareSendRequest `thrift:"req,1" frugal:"1,default,PrepareSendRequest" json:"req"`
}

func NewServer_OperationsPrepareSendArgs() *Server_OperationsPrepareSendArgs {
	return &Server_OperationsPrepareSendArgs{}
}

func (p *Server_OperationsPrepareSendArgs) InitDefault() {
}

var Server_OperationsPrepareSendArgs_Req_DEFAULT *PrepareSendRequest

func (p *Server_OperationsPrepareSendArgs) GetReq() (v *PrepareSendRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPrepareSendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPrepareSendArgs) SetReq(val *PrepareSendRequest) {
	p.Req = val
}

func (p *Server_OperationsPrepareSendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPrepareSendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareSendArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareSendArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPrepareSendResult struct {
	Success *PrepareSendResponse `thrift:"success,0,optional" frugal:"0,optional,PrepareSendResponse" json:"success,omitempty"`
}

func NewServer_OperationsPrepareSendResult() *Server_OperationsPrepareSendResult {
	return &Server_OperationsPrepareSendResult{}
}

func (p *Server_OperationsPrepareSendResult) InitDefault() {
}

var Server_OperationsPrepareSendResult_Success_DEFAULT *PrepareSendResponse

func (p *Server_OperationsPrepareSendResult) GetSuccess() (v *PrepareSendResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPrepareSendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPrepareSendResult) SetSuccess(x interface{}) {
	p.Success = x.(*PrepareSendResponse)
}

func (p *Server_OperationsPrepareSendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPrepareSendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareSendResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareSendResult = map[int16]string{
	0: "success",
}

type Client_Operations interface {
	Pub(ctx context.Context, req *PubRequest) (r *PubResponse, err error)

	Pingpong(ctx context.Context, req *PingpongRequest) (r *PingpongResponse, err error)
}

type Client_OperationsPubArgs struct {
	Req *PubRequest `thrift:"req,1" frugal:"1,default,PubRequest" json:"req"`
}

func NewClient_OperationsPubArgs() *Client_OperationsPubArgs {
	return &Client_OperationsPubArgs{}
}

func (p *Client_OperationsPubArgs) InitDefault() {
}

var Client_OperationsPubArgs_Req_DEFAULT *PubRequest

func (p *Client_OperationsPubArgs) GetReq() (v *PubRequest) {
	if !p.IsSetReq() {
		return Client_OperationsPubArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Client_OperationsPubArgs) SetReq(val *PubRequest) {
	p.Req = val
}

func (p *Client_OperationsPubArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Client_OperationsPubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPubArgs(%+v)", *p)
}

var fieldIDToName_Client_OperationsPubArgs = map[int16]string{
	1: "req",
}

type Client_OperationsPubResult struct {
	Success *PubResponse `thrift:"success,0,optional" frugal:"0,optional,PubResponse" json:"success,omitempty"`
}

func NewClient_OperationsPubResult() *Client_OperationsPubResult {
	return &Client_OperationsPubResult{}
}

func (p *Client_OperationsPubResult) InitDefault() {
}

var Client_OperationsPubResult_Success_DEFAULT *PubResponse

func (p *Client_OperationsPubResult) GetSuccess() (v *PubResponse) {
	if !p.IsSetSuccess() {
		return Client_OperationsPubResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Client_OperationsPubResult) SetSuccess(x interface{}) {
	p.Success = x.(*PubResponse)
}

func (p *Client_OperationsPubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Client_OperationsPubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPubResult(%+v)", *p)
}

var fieldIDToName_Client_OperationsPubResult = map[int16]string{
	0: "success",
}

type Client_OperationsPingpongArgs struct {
	Req *PingpongRequest `thrift:"req,1" frugal:"1,default,PingpongRequest" json:"req"`
}

func NewClient_OperationsPingpongArgs() *Client_OperationsPingpongArgs {
	return &Client_OperationsPingpongArgs{}
}

func (p *Client_OperationsPingpongArgs) InitDefault() {
}

var Client_OperationsPingpongArgs_Req_DEFAULT *PingpongRequest

func (p *Client_OperationsPingpongArgs) GetReq() (v *PingpongRequest) {
	if !p.IsSetReq() {
		return Client_OperationsPingpongArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Client_OperationsPingpongArgs) SetReq(val *PingpongRequest) {
	p.Req = val
}

func (p *Client_OperationsPingpongArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Client_OperationsPingpongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPingpongArgs(%+v)", *p)
}

var fieldIDToName_Client_OperationsPingpongArgs = map[int16]string{
	1: "req",
}

type Client_OperationsPingpongResult struct {
	Success *PingpongResponse `thrift:"success,0,optional" frugal:"0,optional,PingpongResponse" json:"success,omitempty"`
}

func NewClient_OperationsPingpongResult() *Client_OperationsPingpongResult {
	return &Client_OperationsPingpongResult{}
}

func (p *Client_OperationsPingpongResult) InitDefault() {
}

var Client_OperationsPingpongResult_Success_DEFAULT *PingpongResponse

func (p *Client_OperationsPingpongResult) GetSuccess() (v *PingpongResponse) {
	if !p.IsSetSuccess() {
		return Client_OperationsPingpongResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Client_OperationsPingpongResult) SetSuccess(x interface{}) {
	p.Success = x.(*PingpongResponse)
}

func (p *Client_OperationsPingpongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Client_OperationsPingpongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPingpongResult(%+v)", *p)
}

var fieldIDToName_Client_OperationsPingpongResult = map[int16]string{
	0: "success",
}

type ZKServer_Operations interface {
	ProGetBro(ctx context.Context, req *ProGetBroRequest) (r *ProGetBroResponse, err error)

	ProSetPartState(ctx context.Context, req *ProSetPartStateRequest) (r *ProSetPartStateResponse, err error)

	ConGetBro(ctx context.Context, req *ConGetBroRequest) (r *ConGetBroResponse, err error)

	Sub(ctx context.Context, req *SubRequest) (r *SubResponse, err error)

	BroInfo(ctx context.Context, req *BroInfoRequest) (r *BroInfoResponse, err error)

	BroGetAssign(ctx context.Context, req *BroGetAssignRequest) (r *BroGetAssignResponse, err error)

	UpdateOffset(ctx context.Context, req *UpdateOffsetRequest) (r *UpdateOffsetResponse, err error)

	UpdateDup(ctx context.Context, req *UpdateDupRequest) (r *UpdateDupResponse, err error)

	ConStartGetBro(ctx context.Context, req *ConStartGetBroRequest) (r *ConStartGetBroResponse, err error)

	CreateTopic(ctx context.Context, req *CreateTopicRequest) (r *CreateTopicResponse, err error)

	CreatePartition(ctx context.Context, req *CreatePartitionRequest) (r *CreatePartitionResponse, err error)
}

type ZKServer_OperationsProGetBroArgs struct {
	Req *ProGetBroRequest `thrift:"req,1" frugal:"1,default,ProGetBroRequest" json:"req"`
}

func NewZKServer_OperationsProGetBroArgs() *ZKServer_OperationsProGetBroArgs {
	return &ZKServer_OperationsProGetBroArgs{}
}

func (p *ZKServer_OperationsProGetBroArgs) InitDefault() {
}

var ZKServer_OperationsProGetBroArgs_Req_DEFAULT *ProGetBroRequest

func (p *ZKServer_OperationsProGetBroArgs) GetReq() (v *ProGetBroRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsProGetBroArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsProGetBroArgs) SetReq(val *ProGetBroRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsProGetBroArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsProGetBroArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsProGetBroArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsProGetBroArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsProGetBroResult struct {
	Success *ProGetBroResponse `thrift:"success,0,optional" frugal:"0,optional,ProGetBroResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsProGetBroResult() *ZKServer_OperationsProGetBroResult {
	return &ZKServer_OperationsProGetBroResult{}
}

func (p *ZKServer_OperationsProGetBroResult) InitDefault() {
}

var ZKServer_OperationsProGetBroResult_Success_DEFAULT *ProGetBroResponse

func (p *ZKServer_OperationsProGetBroResult) GetSuccess() (v *ProGetBroResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsProGetBroResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsProGetBroResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProGetBroResponse)
}

func (p *ZKServer_OperationsProGetBroResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsProGetBroResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsProGetBroResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsProGetBroResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsProSetPartStateArgs struct {
	Req *ProSetPartStateRequest `thrift:"req,1" frugal:"1,default,ProSetPartStateRequest" json:"req"`
}

func NewZKServer_OperationsProSetPartStateArgs() *ZKServer_OperationsProSetPartStateArgs {
	return &ZKServer_OperationsProSetPartStateArgs{}
}

func (p *ZKServer_OperationsProSetPartStateArgs) InitDefault() {
}

var ZKServer_OperationsProSetPartStateArgs_Req_DEFAULT *ProSetPartStateRequest

func (p *ZKServer_OperationsProSetPartStateArgs) GetReq() (v *ProSetPartStateRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsProSetPartStateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsProSetPartStateArgs) SetReq(val *ProSetPartStateRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsProSetPartStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsProSetPartStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsProSetPartStateArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsProSetPartStateArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsProSetPartStateResult struct {
	Success *ProSetPartStateResponse `thrift:"success,0,optional" frugal:"0,optional,ProSetPartStateResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsProSetPartStateResult() *ZKServer_OperationsProSetPartStateResult {
	return &ZKServer_OperationsProSetPartStateResult{}
}

func (p *ZKServer_OperationsProSetPartStateResult) InitDefault() {
}

var ZKServer_OperationsProSetPartStateResult_Success_DEFAULT *ProSetPartStateResponse

func (p *ZKServer_OperationsProSetPartStateResult) GetSuccess() (v *ProSetPartStateResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsProSetPartStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsProSetPartStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProSetPartStateResponse)
}

func (p *ZKServer_OperationsProSetPartStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsProSetPartStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsProSetPartStateResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsProSetPartStateResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsConGetBroArgs struct {
	Req *ConGetBroRequest `thrift:"req,1" frugal:"1,default,ConGetBroRequest" json:"req"`
}

func NewZKServer_OperationsConGetBroArgs() *ZKServer_OperationsConGetBroArgs {
	return &ZKServer_OperationsConGetBroArgs{}
}

func (p *ZKServer_OperationsConGetBroArgs) InitDefault() {
}

var ZKServer_OperationsConGetBroArgs_Req_DEFAULT *ConGetBroRequest

func (p *ZKServer_OperationsConGetBroArgs) GetReq() (v *ConGetBroRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsConGetBroArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsConGetBroArgs) SetReq(val *ConGetBroRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsConGetBroArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsConGetBroArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsConGetBroArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsConGetBroArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsConGetBroResult struct {
	Success *ConGetBroResponse `thrift:"success,0,optional" frugal:"0,optional,ConGetBroResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsConGetBroResult() *ZKServer_OperationsConGetBroResult {
	return &ZKServer_OperationsConGetBroResult{}
}

func (p *ZKServer_OperationsConGetBroResult) InitDefault() {
}

var ZKServer_OperationsConGetBroResult_Success_DEFAULT *ConGetBroResponse

func (p *ZKServer_OperationsConGetBroResult) GetSuccess() (v *ConGetBroResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsConGetBroResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsConGetBroResult) SetSuccess(x interface{}) {
	p.Success = x.(*ConGetBroResponse)
}

func (p *ZKServer_OperationsConGetBroResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsConGetBroResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsConGetBroResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsConGetBroResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsSubArgs struct {
	Req *SubRequest `thrift:"req,1" frugal:"1,default,SubRequest" json:"req"`
}

func NewZKServer_OperationsSubArgs() *ZKServer_OperationsSubArgs {
	return &ZKServer_OperationsSubArgs{}
}

func (p *ZKServer_OperationsSubArgs) InitDefault() {
}

var ZKServer_OperationsSubArgs_Req_DEFAULT *SubRequest

func (p *ZKServer_OperationsSubArgs) GetReq() (v *SubRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsSubArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsSubArgs) SetReq(val *SubRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsSubArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsSubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsSubArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsSubArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsSubResult struct {
	Success *SubResponse `thrift:"success,0,optional" frugal:"0,optional,SubResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsSubResult() *ZKServer_OperationsSubResult {
	return &ZKServer_OperationsSubResult{}
}

func (p *ZKServer_OperationsSubResult) InitDefault() {
}

var ZKServer_OperationsSubResult_Success_DEFAULT *SubResponse

func (p *ZKServer_OperationsSubResult) GetSuccess() (v *SubResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsSubResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsSubResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubResponse)
}

func (p *ZKServer_OperationsSubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsSubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsSubResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsSubResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsBroInfoArgs struct {
	Req *BroInfoRequest `thrift:"req,1" frugal:"1,default,BroInfoRequest" json:"req"`
}

func NewZKServer_OperationsBroInfoArgs() *ZKServer_OperationsBroInfoArgs {
	return &ZKServer_OperationsBroInfoArgs{}
}

func (p *ZKServer_OperationsBroInfoArgs) InitDefault() {
}

var ZKServer_OperationsBroInfoArgs_Req_DEFAULT *BroInfoRequest

func (p *ZKServer_OperationsBroInfoArgs) GetReq() (v *BroInfoRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsBroInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsBroInfoArgs) SetReq(val *BroInfoRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsBroInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsBroInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsBroInfoArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsBroInfoArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsBroInfoResult struct {
	Success *BroInfoResponse `thrift:"success,0,optional" frugal:"0,optional,BroInfoResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsBroInfoResult() *ZKServer_OperationsBroInfoResult {
	return &ZKServer_OperationsBroInfoResult{}
}

func (p *ZKServer_OperationsBroInfoResult) InitDefault() {
}

var ZKServer_OperationsBroInfoResult_Success_DEFAULT *BroInfoResponse

func (p *ZKServer_OperationsBroInfoResult) GetSuccess() (v *BroInfoResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsBroInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsBroInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*BroInfoResponse)
}

func (p *ZKServer_OperationsBroInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsBroInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsBroInfoResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsBroInfoResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsBroGetAssignArgs struct {
	Req *BroGetAssignRequest `thrift:"req,1" frugal:"1,default,BroGetAssignRequest" json:"req"`
}

func NewZKServer_OperationsBroGetAssignArgs() *ZKServer_OperationsBroGetAssignArgs {
	return &ZKServer_OperationsBroGetAssignArgs{}
}

func (p *ZKServer_OperationsBroGetAssignArgs) InitDefault() {
}

var ZKServer_OperationsBroGetAssignArgs_Req_DEFAULT *BroGetAssignRequest

func (p *ZKServer_OperationsBroGetAssignArgs) GetReq() (v *BroGetAssignRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsBroGetAssignArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsBroGetAssignArgs) SetReq(val *BroGetAssignRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsBroGetAssignArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsBroGetAssignArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsBroGetAssignArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsBroGetAssignArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsBroGetAssignResult struct {
	Success *BroGetAssignResponse `thrift:"success,0,optional" frugal:"0,optional,BroGetAssignResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsBroGetAssignResult() *ZKServer_OperationsBroGetAssignResult {
	return &ZKServer_OperationsBroGetAssignResult{}
}

func (p *ZKServer_OperationsBroGetAssignResult) InitDefault() {
}

var ZKServer_OperationsBroGetAssignResult_Success_DEFAULT *BroGetAssignResponse

func (p *ZKServer_OperationsBroGetAssignResult) GetSuccess() (v *BroGetAssignResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsBroGetAssignResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsBroGetAssignResult) SetSuccess(x interface{}) {
	p.Success = x.(*BroGetAssignResponse)
}

func (p *ZKServer_OperationsBroGetAssignResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsBroGetAssignResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsBroGetAssignResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsBroGetAssignResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsUpdateOffsetArgs struct {
	Req *UpdateOffsetRequest `thrift:"req,1" frugal:"1,default,UpdateOffsetRequest" json:"req"`
}

func NewZKServer_OperationsUpdateOffsetArgs() *ZKServer_OperationsUpdateOffsetArgs {
	return &ZKServer_OperationsUpdateOffsetArgs{}
}

func (p *ZKServer_OperationsUpdateOffsetArgs) InitDefault() {
}

var ZKServer_OperationsUpdateOffsetArgs_Req_DEFAULT *UpdateOffsetRequest

func (p *ZKServer_OperationsUpdateOffsetArgs) GetReq() (v *UpdateOffsetRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsUpdateOffsetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsUpdateOffsetArgs) SetReq(val *UpdateOffsetRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsUpdateOffsetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsUpdateOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsUpdateOffsetArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsUpdateOffsetArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsUpdateOffsetResult struct {
	Success *UpdateOffsetResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateOffsetResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsUpdateOffsetResult() *ZKServer_OperationsUpdateOffsetResult {
	return &ZKServer_OperationsUpdateOffsetResult{}
}

func (p *ZKServer_OperationsUpdateOffsetResult) InitDefault() {
}

var ZKServer_OperationsUpdateOffsetResult_Success_DEFAULT *UpdateOffsetResponse

func (p *ZKServer_OperationsUpdateOffsetResult) GetSuccess() (v *UpdateOffsetResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsUpdateOffsetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsUpdateOffsetResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateOffsetResponse)
}

func (p *ZKServer_OperationsUpdateOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsUpdateOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsUpdateOffsetResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsUpdateOffsetResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsUpdateDupArgs struct {
	Req *UpdateDupRequest `thrift:"req,1" frugal:"1,default,UpdateDupRequest" json:"req"`
}

func NewZKServer_OperationsUpdateDupArgs() *ZKServer_OperationsUpdateDupArgs {
	return &ZKServer_OperationsUpdateDupArgs{}
}

func (p *ZKServer_OperationsUpdateDupArgs) InitDefault() {
}

var ZKServer_OperationsUpdateDupArgs_Req_DEFAULT *UpdateDupRequest

func (p *ZKServer_OperationsUpdateDupArgs) GetReq() (v *UpdateDupRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsUpdateDupArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsUpdateDupArgs) SetReq(val *UpdateDupRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsUpdateDupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsUpdateDupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsUpdateDupArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsUpdateDupArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsUpdateDupResult struct {
	Success *UpdateDupResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateDupResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsUpdateDupResult() *ZKServer_OperationsUpdateDupResult {
	return &ZKServer_OperationsUpdateDupResult{}
}

func (p *ZKServer_OperationsUpdateDupResult) InitDefault() {
}

var ZKServer_OperationsUpdateDupResult_Success_DEFAULT *UpdateDupResponse

func (p *ZKServer_OperationsUpdateDupResult) GetSuccess() (v *UpdateDupResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsUpdateDupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsUpdateDupResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateDupResponse)
}

func (p *ZKServer_OperationsUpdateDupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsUpdateDupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsUpdateDupResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsUpdateDupResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsConStartGetBroArgs struct {
	Req *ConStartGetBroRequest `thrift:"req,1" frugal:"1,default,ConStartGetBroRequest" json:"req"`
}

func NewZKServer_OperationsConStartGetBroArgs() *ZKServer_OperationsConStartGetBroArgs {
	return &ZKServer_OperationsConStartGetBroArgs{}
}

func (p *ZKServer_OperationsConStartGetBroArgs) InitDefault() {
}

var ZKServer_OperationsConStartGetBroArgs_Req_DEFAULT *ConStartGetBroRequest

func (p *ZKServer_OperationsConStartGetBroArgs) GetReq() (v *ConStartGetBroRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsConStartGetBroArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsConStartGetBroArgs) SetReq(val *ConStartGetBroRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsConStartGetBroArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsConStartGetBroArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsConStartGetBroArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsConStartGetBroArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsConStartGetBroResult struct {
	Success *ConStartGetBroResponse `thrift:"success,0,optional" frugal:"0,optional,ConStartGetBroResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsConStartGetBroResult() *ZKServer_OperationsConStartGetBroResult {
	return &ZKServer_OperationsConStartGetBroResult{}
}

func (p *ZKServer_OperationsConStartGetBroResult) InitDefault() {
}

var ZKServer_OperationsConStartGetBroResult_Success_DEFAULT *ConStartGetBroResponse

func (p *ZKServer_OperationsConStartGetBroResult) GetSuccess() (v *ConStartGetBroResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsConStartGetBroResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsConStartGetBroResult) SetSuccess(x interface{}) {
	p.Success = x.(*ConStartGetBroResponse)
}

func (p *ZKServer_OperationsConStartGetBroResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsConStartGetBroResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsConStartGetBroResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsConStartGetBroResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsCreateTopicArgs struct {
	Req *CreateTopicRequest `thrift:"req,1" frugal:"1,default,CreateTopicRequest" json:"req"`
}

func NewZKServer_OperationsCreateTopicArgs() *ZKServer_OperationsCreateTopicArgs {
	return &ZKServer_OperationsCreateTopicArgs{}
}

func (p *ZKServer_OperationsCreateTopicArgs) InitDefault() {
}

var ZKServer_OperationsCreateTopicArgs_Req_DEFAULT *CreateTopicRequest

func (p *ZKServer_OperationsCreateTopicArgs) GetReq() (v *CreateTopicRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsCreateTopicArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsCreateTopicArgs) SetReq(val *CreateTopicRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsCreateTopicArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsCreateTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsCreateTopicArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsCreateTopicArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsCreateTopicResult struct {
	Success *CreateTopicResponse `thrift:"success,0,optional" frugal:"0,optional,CreateTopicResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsCreateTopicResult() *ZKServer_OperationsCreateTopicResult {
	return &ZKServer_OperationsCreateTopicResult{}
}

func (p *ZKServer_OperationsCreateTopicResult) InitDefault() {
}

var ZKServer_OperationsCreateTopicResult_Success_DEFAULT *CreateTopicResponse

func (p *ZKServer_OperationsCreateTopicResult) GetSuccess() (v *CreateTopicResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsCreateTopicResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsCreateTopicResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateTopicResponse)
}

func (p *ZKServer_OperationsCreateTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsCreateTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsCreateTopicResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsCreateTopicResult = map[int16]string{
	0: "success",
}

type ZKServer_OperationsCreatePartitionArgs struct {
	Req *CreatePartitionRequest `thrift:"req,1" frugal:"1,default,CreatePartitionRequest" json:"req"`
}

func NewZKServer_OperationsCreatePartitionArgs() *ZKServer_OperationsCreatePartitionArgs {
	return &ZKServer_OperationsCreatePartitionArgs{}
}

func (p *ZKServer_OperationsCreatePartitionArgs) InitDefault() {
}

var ZKServer_OperationsCreatePartitionArgs_Req_DEFAULT *CreatePartitionRequest

func (p *ZKServer_OperationsCreatePartitionArgs) GetReq() (v *CreatePartitionRequest) {
	if !p.IsSetReq() {
		return ZKServer_OperationsCreatePartitionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZKServer_OperationsCreatePartitionArgs) SetReq(val *CreatePartitionRequest) {
	p.Req = val
}

func (p *ZKServer_OperationsCreatePartitionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZKServer_OperationsCreatePartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsCreatePartitionArgs(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsCreatePartitionArgs = map[int16]string{
	1: "req",
}

type ZKServer_OperationsCreatePartitionResult struct {
	Success *CreatePartitionResponse `thrift:"success,0,optional" frugal:"0,optional,CreatePartitionResponse" json:"success,omitempty"`
}

func NewZKServer_OperationsCreatePartitionResult() *ZKServer_OperationsCreatePartitionResult {
	return &ZKServer_OperationsCreatePartitionResult{}
}

func (p *ZKServer_OperationsCreatePartitionResult) InitDefault() {
}

var ZKServer_OperationsCreatePartitionResult_Success_DEFAULT *CreatePartitionResponse

func (p *ZKServer_OperationsCreatePartitionResult) GetSuccess() (v *CreatePartitionResponse) {
	if !p.IsSetSuccess() {
		return ZKServer_OperationsCreatePartitionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZKServer_OperationsCreatePartitionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePartitionResponse)
}

func (p *ZKServer_OperationsCreatePartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZKServer_OperationsCreatePartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZKServer_OperationsCreatePartitionResult(%+v)", *p)
}

var fieldIDToName_ZKServer_OperationsCreatePartitionResult = map[int16]string{
	0: "success",
}
